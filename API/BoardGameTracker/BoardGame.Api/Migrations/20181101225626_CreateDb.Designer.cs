// <auto-generated />
using System;
using BoardGame.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoardGame.Api.Migrations
{
    [DbContext(typeof(BoardGameContext))]
    [Migration("20181101225626_CreateDb")]
    partial class CreateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoardGame.Api.Models.BoardGameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BoardGame.Api.Models.BoardGameEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<double>("AverageRating");

                    b.Property<string>("BestPlayerCount");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<int>("MaxPlayers");

                    b.Property<int>("MaxPlaytime");

                    b.Property<int>("MinPlayers");

                    b.Property<int>("MinPlaytime");

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.Property<int>("PlayingTime");

                    b.Property<string>("Thumbnail");

                    b.Property<int>("UsersRated");

                    b.Property<DateTimeOffset>("YearPublished");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = 1, Age = 0, AverageRating = 0.0, MaxPlayers = 0, MaxPlaytime = 0, MinPlayers = 0, MinPlaytime = 0, Name = "Azul", ObjectId = 0, PlayingTime = 0, UsersRated = 0, YearPublished = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)) }
                    );
                });

            modelBuilder.Entity("BoardGame.Api.Models.GameCategoryGameEntry", b =>
                {
                    b.Property<int>("BoardGameCategoryId");

                    b.Property<int>("BoardGameEntryId");

                    b.HasKey("BoardGameCategoryId", "BoardGameEntryId");

                    b.HasIndex("BoardGameEntryId");

                    b.ToTable("GameCategoryGameEntry");
                });

            modelBuilder.Entity("BoardGame.Api.Models.GamePlaySession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GamePlaySessions");

                    b.HasData(
                        new { Id = 1, Date = new DateTimeOffset(new DateTime(2018, 11, 1, 22, 56, 26, 257, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), GameId = 1 }
                    );
                });

            modelBuilder.Entity("BoardGame.Api.Models.GamePlaySessionPlayer", b =>
                {
                    b.Property<int>("GamePlaySessionId");

                    b.Property<int>("PlayerId");

                    b.HasKey("GamePlaySessionId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamePlaySessionPlayer");
                });

            modelBuilder.Entity("BoardGame.Api.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new { Id = 1, Name = "Admin", PasswordHash = new byte[] { 122, 56, 172, 190, 229, 242, 242, 172, 198, 224, 109, 68, 21, 2, 180, 30, 215, 107, 248, 216, 77, 184, 101, 75, 32, 227, 26, 193, 246, 2, 156, 25, 138, 180, 199, 185, 124, 114, 54, 101, 60, 77, 188, 69, 97, 174, 116, 179, 170, 49, 106, 28, 135, 160, 132, 160, 77, 135, 76, 251, 229, 181, 67, 235 }, PasswordSalt = new byte[] { 214, 158, 196, 48, 174, 238, 177, 112, 255, 35, 81, 123, 255, 74, 83, 36, 1, 165, 136, 124, 246, 58, 14, 229, 168, 147, 118, 187, 91, 215, 225, 210, 205, 89, 152, 22, 24, 219, 90, 227, 47, 244, 14, 163, 152, 131, 116, 154, 71, 130, 187, 194, 115, 105, 113, 123, 19, 23, 205, 248, 91, 96, 246, 105, 50, 182, 20, 198, 31, 232, 43, 179, 183, 59, 72, 49, 204, 233, 172, 48, 63, 202, 246, 43, 76, 242, 130, 142, 74, 123, 8, 37, 147, 141, 97, 19, 14, 120, 201, 209, 106, 98, 227, 77, 51, 70, 17, 85, 191, 134, 211, 100, 233, 42, 70, 217, 133, 200, 16, 100, 96, 142, 211, 9, 178, 175, 219, 251 }, Username = "admin" }
                    );
                });

            modelBuilder.Entity("BoardGame.Api.Models.PlayerRating", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("PlayerId");

                    b.Property<int?>("Rating");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new { GameId = 1, PlayerId = 1, Rating = 4 }
                    );
                });

            modelBuilder.Entity("BoardGame.Api.Models.GameCategoryGameEntry", b =>
                {
                    b.HasOne("BoardGame.Api.Models.BoardGameCategory", "BoardGameCategory")
                        .WithMany("Games")
                        .HasForeignKey("BoardGameCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardGame.Api.Models.BoardGameEntry", "BoardGameEntry")
                        .WithMany("Categories")
                        .HasForeignKey("BoardGameEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BoardGame.Api.Models.GamePlaySession", b =>
                {
                    b.HasOne("BoardGame.Api.Models.BoardGameEntry", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BoardGame.Api.Models.GamePlaySessionPlayer", b =>
                {
                    b.HasOne("BoardGame.Api.Models.GamePlaySession", "GamePlaySession")
                        .WithMany("Players")
                        .HasForeignKey("GamePlaySessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardGame.Api.Models.Player", "Player")
                        .WithMany("GamePlaySessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BoardGame.Api.Models.PlayerRating", b =>
                {
                    b.HasOne("BoardGame.Api.Models.BoardGameEntry", "Game")
                        .WithMany("PlayerRatings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardGame.Api.Models.Player", "Player")
                        .WithMany("Ratings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
