// <auto-generated />
using System;
using BoardGame.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoardGame.Api.Migrations
{
    [DbContext(typeof(BoardGameContext))]
    [Migration("20181029161624_CreateDb")]
    partial class CreateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoardGame.Api.Models.BoardGameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BoardGame.Api.Models.BoardGameEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<double>("AverageRating");

                    b.Property<string>("BestPlayerCount");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<int>("MaxPlayers");

                    b.Property<int>("MaxPlaytime");

                    b.Property<int>("MinPlayers");

                    b.Property<int>("MinPlaytime");

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.Property<int>("PlayingTime");

                    b.Property<string>("Thumbnail");

                    b.Property<int>("UsersRated");

                    b.Property<DateTimeOffset>("YearPublished");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("BoardGame.Api.Models.GameCategoryGameEntry", b =>
                {
                    b.Property<int>("BoardGameCategoryId");

                    b.Property<int>("BoardGameEntryId");

                    b.HasKey("BoardGameCategoryId", "BoardGameEntryId");

                    b.HasIndex("BoardGameEntryId");

                    b.ToTable("GameCategoryGameEntry");
                });

            modelBuilder.Entity("BoardGame.Api.Models.GamePlaySession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GamePlaySessions");
                });

            modelBuilder.Entity("BoardGame.Api.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BoardGame.Api.Models.PlayerRating", b =>
                {
                    b.Property<int>("GamePlayerSessionId");

                    b.Property<int>("PlayerId");

                    b.Property<int?>("GamePlaySessionId");

                    b.Property<int?>("Rating");

                    b.HasKey("GamePlayerSessionId", "PlayerId");

                    b.HasIndex("GamePlaySessionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerRating");
                });

            modelBuilder.Entity("BoardGame.Api.Models.GameCategoryGameEntry", b =>
                {
                    b.HasOne("BoardGame.Api.Models.BoardGameCategory", "BoardGameCategory")
                        .WithMany("Games")
                        .HasForeignKey("BoardGameCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardGame.Api.Models.BoardGameEntry", "BoardGameEntry")
                        .WithMany("Categories")
                        .HasForeignKey("BoardGameEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BoardGame.Api.Models.GamePlaySession", b =>
                {
                    b.HasOne("BoardGame.Api.Models.BoardGameEntry", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BoardGame.Api.Models.PlayerRating", b =>
                {
                    b.HasOne("BoardGame.Api.Models.GamePlaySession", "GamePlaySession")
                        .WithMany("PlayerRatings")
                        .HasForeignKey("GamePlaySessionId");

                    b.HasOne("BoardGame.Api.Models.Player", "Player")
                        .WithMany("Ratings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
