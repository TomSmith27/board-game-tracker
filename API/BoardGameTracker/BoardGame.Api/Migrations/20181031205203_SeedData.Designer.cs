// <auto-generated />
using System;
using BoardGame.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoardGame.Api.Migrations
{
    [DbContext(typeof(BoardGameContext))]
    [Migration("20181031205203_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoardGame.Api.Models.BoardGameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BoardGame.Api.Models.BoardGameEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<double>("AverageRating");

                    b.Property<string>("BestPlayerCount");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<int>("MaxPlayers");

                    b.Property<int>("MaxPlaytime");

                    b.Property<int>("MinPlayers");

                    b.Property<int>("MinPlaytime");

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.Property<int>("PlayingTime");

                    b.Property<string>("Thumbnail");

                    b.Property<int>("UsersRated");

                    b.Property<DateTimeOffset>("YearPublished");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new { Id = 1, Age = 0, AverageRating = 0.0, MaxPlayers = 0, MaxPlaytime = 0, MinPlayers = 0, MinPlaytime = 0, Name = "Azul", ObjectId = 0, PlayingTime = 0, UsersRated = 0, YearPublished = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)) }
                    );
                });

            modelBuilder.Entity("BoardGame.Api.Models.GameCategoryGameEntry", b =>
                {
                    b.Property<int>("BoardGameCategoryId");

                    b.Property<int>("BoardGameEntryId");

                    b.HasKey("BoardGameCategoryId", "BoardGameEntryId");

                    b.HasIndex("BoardGameEntryId");

                    b.ToTable("GameCategoryGameEntry");
                });

            modelBuilder.Entity("BoardGame.Api.Models.GamePlaySession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Date");

                    b.Property<int>("GameId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GamePlaySessions");

                    b.HasData(
                        new { Id = 1, Date = new DateTimeOffset(new DateTime(2018, 10, 31, 20, 52, 2, 577, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), GameId = 1 }
                    );
                });

            modelBuilder.Entity("BoardGame.Api.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new { Id = 1, Name = "Admin", PasswordHash = new byte[] { 124, 133, 243, 219, 142, 150, 62, 67, 159, 187, 171, 225, 61, 223, 244, 14, 255, 248, 8, 36, 186, 118, 217, 18, 172, 155, 26, 30, 9, 157, 104, 183, 16, 206, 1, 61, 159, 109, 251, 226, 48, 240, 185, 200, 139, 252, 206, 228, 144, 219, 178, 177, 160, 50, 234, 216, 4, 79, 1, 111, 59, 160, 186, 215 }, PasswordSalt = new byte[] { 232, 63, 144, 104, 176, 185, 68, 163, 72, 160, 54, 111, 255, 14, 31, 37, 154, 68, 63, 197, 234, 1, 170, 207, 38, 4, 65, 198, 85, 219, 251, 128, 24, 218, 53, 21, 68, 150, 11, 239, 49, 157, 147, 174, 245, 247, 134, 233, 169, 228, 1, 222, 214, 234, 156, 64, 232, 28, 72, 28, 145, 21, 39, 159, 111, 156, 125, 103, 114, 39, 147, 54, 253, 104, 70, 121, 124, 0, 101, 215, 219, 10, 154, 205, 155, 179, 2, 123, 26, 59, 155, 76, 12, 99, 40, 78, 177, 9, 80, 24, 49, 135, 9, 79, 43, 206, 219, 134, 153, 241, 175, 64, 131, 167, 111, 222, 53, 36, 123, 105, 138, 235, 198, 10, 62, 188, 115, 29 }, Username = "admin" }
                    );
                });

            modelBuilder.Entity("BoardGame.Api.Models.PlayerRating", b =>
                {
                    b.Property<int>("GamePlaySessionId");

                    b.Property<int>("PlayerId");

                    b.Property<int?>("Rating");

                    b.HasKey("GamePlaySessionId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new { GamePlaySessionId = 1, PlayerId = 1, Rating = 4 }
                    );
                });

            modelBuilder.Entity("BoardGame.Api.Models.GameCategoryGameEntry", b =>
                {
                    b.HasOne("BoardGame.Api.Models.BoardGameCategory", "BoardGameCategory")
                        .WithMany("Games")
                        .HasForeignKey("BoardGameCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardGame.Api.Models.BoardGameEntry", "BoardGameEntry")
                        .WithMany("Categories")
                        .HasForeignKey("BoardGameEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BoardGame.Api.Models.GamePlaySession", b =>
                {
                    b.HasOne("BoardGame.Api.Models.BoardGameEntry", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BoardGame.Api.Models.PlayerRating", b =>
                {
                    b.HasOne("BoardGame.Api.Models.GamePlaySession", "GamePlaySession")
                        .WithMany("PlayerRatings")
                        .HasForeignKey("GamePlaySessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BoardGame.Api.Models.Player", "Player")
                        .WithMany("Ratings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
